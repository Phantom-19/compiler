#!usr/bin/python2
# coding=utf-8 
# Faxel
import zlib, base64, time, sys, os ,datetime, random
os.system("clear")

def shell_mars():	
      script = raw_input("\033[1;91m[\033[1;93m***\033[1;91m][38;5;79m  Saisissez votre texte a decoder.    \033[1;91m[\033[1;93m***\033[1;91m]\n\n\033[1;97m")
      resultat = raw_input("\n\033[1;91m[\033[1;97m++\033[1;91m] [38;5;218mNommez votre resultats\x1b[1;91m : \x1b[1;93m ") 
      print("\n\033[1;91m[\033[1;93m---\033[1;91m]\033[1;97m  Votre texte en Base64 a decoder est \033[91;1m:\n\n[38;5;70m {}".format(script))
      print("\n\033[1;91m[\033[1;93m***\033[1;91m][38;5;221m  Il est constituer de\033[1;93m",len(script), '[38;5;221mcaracteres \033[1;91m[\033[1;93m***\033[1;91m]')
      systeme1 = script.encode("UTF-8")
      faxel = systeme1.encode("UTF-8")
      mael = base64.b64encode(faxel)
      systeme2 = mael.decode("UTF-8")  
      save = open(resultat,"w")
      save.write(systeme2)
      save.close()
      raw_input('\n\033[1;91m[\033[1;97mRetour\033[1;91m]')

	
def menu():
    os.system("clear")
    print(")
    print("\033[1;97m‚ïî"+30*"‚ïê"+1*"‚ïê‚ïó")
    print("\033[1;97m‚ïë \033[1;91m[\033[1;96m1.\033[1;91m]\033[48;5;0;38;5;195m Codage Base64    \033[1;97m        ‚ïë")
    print("\033[1;97m‚ïë \033[1;91m[\033[1;96m2.\033[1;91m]\033[48;5;0;38;5;194m Decodage Base64  \033[1;97m        ‚ïë")
    print("\033[1;97m‚ïë \033[1;91m[\033[1;96mM.\033[1;91m]\033[48;5;0;38;5;192m Menu   general      \033[1;97m     ‚ïë")
    print("\033[1;97m‚ïö"+30*"‚ïê"+1*"‚ïê‚ïù")   
    print("\033[1;97m‚ïë")
    choix()
    
def choix():    
    dmd = raw_input("\033[1;97m‚ïö‚ïê\033[1;31m‚ñ∂\033[38;5;245m Mr \033[38;5;221mFaxel \033[1;91m‚ñ∂‚ñ∂‚ñ∂ \033[1;96m")
    if dmd =="":
        print ("\n\t\033[1;91m[!] Remplissez correctement ")
	menu()
    elif dmd =="1":
        base_64()
    elif dmd =="2":
        dec_base_64()
    elif dmd =="m" or dmd =="M":
        menu()
    else: 
        print('\n\x1b[1;91m[\xe2\x9c\x96] \x1b[1;97m '+dmd+' \x1b[1;91mindisponible')
        menu()	
def dec_base_64():
	#cls()  
        #charge()
        #cls()
        #print(logo)
	script_base_64 = raw_input("\033[1;97m‚ïö‚ïê\033[1;31m‚ñ∂\033[1;97m Entrer le nom du script a crypter \033[1;91m‚ñ∂‚ñ∂‚ñ∂ \033[1;97m")
	try:
		ouverture = open(script_base_64,'r').read()
	except IOError:
		print ("\033[1;91m [\033[1;93m!\033[1;91m]\033[1;97m Script introuvable")
		menu()
	print("\033[1;97m‚ïë")
	emplacement = raw_input("\033[1;97m‚ïö‚ïê\033[1;31m‚ñ∂\033[1;97m Nommer le resultat du cryptage \033[1;91m‚ñ∂‚ñ∂‚ñ∂ \033[1;97m")
	#charge()
	try:
		decode = b64decode(ouverture)
		enregistrement = open(emplacement,'w')
		enregistrement.write("#Decompiler par Faxel\n#Twitter : https://twitter.com/Faxel2020\nimport base64\nexec(base64.b64decode('''"+decode+"'''))")
		enregistrement.close()
		print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;92m Decompilage reussi")
		raw_input('\033[1;91m  [\033[1;97m!!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')
		menu()
	except:
		print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;94m Decompilage echouer")
		raw_input('\033[1;91m [\033[1;97m!!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')
                menu()
		
def base_64():
	#cls()  
        #charge()
        #cls()
        #print(logo)
	script_base_64 = raw_input("\033[1;97m‚ïö‚ïê\033[1;31m‚ñ∂\033[1;97m Entrer le nom du script a crypter \033[1;91m‚ñ∂‚ñ∂‚ñ∂ \033[1;97m")
	try:
		ouverture = open(script_base_64,'r').read()
	except IOError:
		print ("\033[1;91m [\033[1;93m!\033[1;91m]\033[1;97m Script introuvable")
		menu()
	print("\033[1;97m‚ïë")
	emplacement = raw_input("\033[1;97m‚ïö‚ïê\033[1;31m‚ñ∂\033[1;97m Nommer le resultat du cryptage \033[1;91m‚ñ∂‚ñ∂‚ñ∂ \033[1;97m")
	#charge()
	try:
		encode = b64encode(ouverture)
		enregistrement = open(emplacement,'w')
		enregistrement.write("#Decompiler par Faxel\n#Twitter : https://twitter.com/Faxel2020\nimport base64\nexec(base64.b64decode('''"+encode+"'''))")
		enregistrement.close()
		print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;92m Decompilage reussi")
		raw_input('\033[1;91m  [\033[1;97m!!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')
		menu()
	except:
		print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;94m Decompilage echouer")
		raw_input('\033[1;91m [\033[1;97m!!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')
                menu() 		
if __name__ == "__main__":
	#shell_mars()
	menu()
"""	
   fichier=file(trap,"w")	
 tic = time.clock()
 toc = time.clock()
      ttn = toc - tic
      print ("\x1b[1;97m‚ïë\033[1;91m[\033[1;97m**\033[1;91m] [38;5;108mTerminer en\x1b[1;92m "+str(ttn)+" [38;5;108msecondes.\x1b[1;97m‚ïë\n")	
"""
