#!usr/bin/python2
# coding=utf-8 
# Faxel
"""
"\n# -*- coding: UTF-8 -*-
\n'''\033[1;94mFax-Cryptage {}
\n\033[1;95mDev \033[1;91m: Faxel \n'''
\nimport sys\nimport zlib as zn\nfrom base64 import *\nimport marshal as mc\n\ndef main_code():
\n    exec(mc.loads(zn.decompress(b16decode('{}'))))
\n\nmain_code()\n".format(time.ctime(), compresse)"""

import zlib as zn
from base64 import *
import marshal as mc
import zlib, base64, time, sys, os ,datetime, random
logo1 = ("""\033[1;96m       ╔═╗┬─┐┬ ┬┌─┐┌┬┐┌─┐┌─┐┌─┐ \n\033[1;96m       ║  ├┬┘└┬┘├─┘ │ ├─┤│ ┬├┤  \n\033[1;96m       ╚═╝┴└─ ┴ ┴   ┴ ┴ ┴└─┘└─┘ """)
logo = ("""\033[38;5;214m●▬▬▬▬▬▬▬▬๑\033[1;97m●▬▬▬▬▬▬๑۩۩๑▬▬▬▬▬▬●●▬▬▬▬▬\033[1;32m▬▬▬▬๑۩۩๑▬▬▬▬▬▬●     \n\033[38;5;214m•_  _ ____ \033[1;97m _  _ ____ ____ _  _\033[1;32m ____ ____   _  _• \n\033[38;5;214m•|\/| |__/ \033[1;97m |__| |__| |    |_/ \033[1;32m |___ |__/   |_/ • \n\033[38;5;214m•|  | |  \ \033[1;97m |  | |  | |___ | \_\033[1;32m |___ |  \ __| \_• \n\033[38;5;214m●▬▬▬▬▬▬▬▬๑\033[1;97m●▬▬▬▬▬▬๑۩۩๑▬▬▬▬▬▬●●▬▬▬▬▬\033[1;32m▬▬▬▬๑۩۩๑▬▬▬▬▬▬●\n\033[1;97m╔═════════════════════════════════════════════╗\n\033[1;97m║\033[1;91m[\033[1;93m**\033[1;91m]\033[38;5;95m      Developpeur \033[1;97m:\033[38;5;214m  Faxel           \033[1;91m[\033[1;93m**\033[1;91m]\033[1;97m║\n\033[1;97m╚═════════════════════════════════════════════╝
""")	
os.system("clear")
print(logo)
print(logo1) 

#try:
    #dmd = raw_input('\033[1;93mScript a crypter \033[1;91m: \033[1;97m')
    #reoriente = mc.dumps(compile(open(dmd, 'rb').read(), '<string>', 'exec'))
#except:
    #print ("\033[1;91mFichier introuvable ou invalide")
    #sys.exit()
#compresse = base64.b16encode(zlib.compress(reoriente))
#codeur1 = "\n# -*- coding: UTF-8 -*-\n'''\033[1;94mFax-Cryptage {}\n\033[1;95mDev \033[1;91m: Faxel \n'''\nimport sys\nimport zlib as zn\nfrom base64 import *\nimport marshal as mc\n\ndef main_code():\n    exec(mc.loads(zn.decompress(b16decode('{}'))))\n\nmain_code()\n".format(time.ctime(), compresse)

#codeur2 = '\nimport marshal , base64\nexec(marshal.loads(base64.b16decode("{}")))\n'.format(base64.b16encode(mc.dumps(compile(codeur1, '<string>', 'exec'))))
#codeur3 = '\nimport marshal , base64\nexec(marshal.loads(base64.b32decode("{}")))\n'.format(base64.b32encode(mc.dumps(compile(codeur2, '<string>', 'exec'))))
t = ("""
def dec_mars():
	script_mars = raw_input("\033[1;97m╚═\033[1;31m▶\033[1;97m Entrer le nom du script a crypter \033[1;91m▶▶▶ \033[1;97m")
	try:
		ouverture = open(script_mars,'r').read()
	except IOError:
		print ("\033[1;91m [\033[1;93m!\033[1;91m]\033[1;97m Script introuvable")
		#menu()
	print("\033[1;97m║")
	emplacement = raw_input("\033[1;97m╚═\033[1;31m▶\033[1;97m Nommer le resultat du cryptage \033[1;91m▶▶▶ \033[1;97m")
	#charge()
	try:	
		compresse = base64.b16encode(mc.dumps(compile(ouverture, '<string>', 'exec')))
		#compresse = base64.b16encode(zlib.compress(ouverture))
		enregistrement = open(emplacement,'w')
		enregistrement.write("#Compiler par Faxel\n#Twitter : https://twitter.com/Faxel2020\nimport marshal as mc\nimport zlib as zn \nimport marshal , base64 , zlib\nfrom base64 import *\nexec(marshal.loads(zlib.decompress(base64.b16decode('"+compresse+"'))))")
		enregistrement.close()
		print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;92m Compilage reussi")
		raw_input('\033[1;91m  [\033[1;97m!!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')
		#menu()
	except:
		print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;94m Compilage echouer")
		raw_input('\033[1;91m  [\033[1;97m!!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')
                #menu()   
		


####################################################################################################			
def decryptage_bash():
   try:
       #Dev: Faxel
       #cls()
       #print(logo)
       bash_decryp_script = raw_input("\033[1;97m╚═\033[1;31m▶\033[1;97m Entrer le nom du script a crypter \033[1;91m▶▶▶ \033[1;97m")
       ouverture = open(bash_decryp_script,'r').read()
       fichier_de_fin = ouverture.replace("eval","echo")
       resultat = raw_input("\033[1;97m╚═\033[1;31m▶\033[1;97m Nommer le resultat du cryptage \033[1;91m▶▶▶ \033[1;97m")
       ouverture = open(resultat,'w')
       ouverture.write(fichier_de_fin)
       ouverture.close()
       #os.system("touch tes.sh")
       #os.system("bash " + resultat + " > tes.sh")
       #os.remove(resultat)
       #os.system("mv -f tes.sh " + resultat)
       print ("\033[1;91m [\033[1;93m!\033[1;91m]\033[1;92m Terminer..")
       raw_input('\n\x1b[1;91m[ \x1b[1;97mRetour \x1b[1;91m]')		
       #menu_bash()
   except KeyboardInterrupt:
       print ("\033[1;91m [\033[1;93m!\033[1;91m]\033[1;94m Arret!")
       raw_input('\n\x1b[1;91m[ \x1b[1;97mRetour \x1b[1;91m]')		
       #menu_bash()
   except IOError:
       print ("\033[1;91m [\033[1;93m!\033[1;91m]\033[1;94m Fichier introuvable!")
       raw_input('\n\x1b[1;91m[ \x1b[1;97mRetour \x1b[1;91m]')		
       #menu_bash()""")

def decryptage_bash():	
	
   try:
       bash_decryp_script = raw_input( "Script  > ")
       f = open(bash_decryp_script,'r')
       Lecture_fichier = f.read()
       f.close()
       decompresse = Lecture_fichier.replace("eval","echo")
       resultat = raw_input("Production > " )
       f = open(resultat,'w')
       f.write("#Decompiler par Faxel\n#Twitter : https://twitter.com/Faxel2020\n")
       f.write(decompresse)
       f.close()
       os.system("touch tes.sh")
       os.system("bash " + out + " > tes.sh")
       #os.remove(out)
       os.system("mv -f tes.sh " + out)
       print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;92m Compilage reussi")
       raw_input('\033[1;91m  [\033[1;97m!!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')
   except KeyboardInterrupt:
       print (" Arret!")
   except IOError:
       print (" Fichier introuvable!")
g =("""
    try:
       bash_decryp_script = raw_input("Script > ")
       ouverture = open(bash_decryp_script,'r')
       lame = ouverture.read()
       ouverture.close()
       decompresse = lame.replace("eval","echo")
       stockage = raw_input("Stockage  > " )
       enregistrement = open(stockage,'w')
       enregistrement.write(decompresse)
       enregistrement.close()
       print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;92m Compilage reussi")
       raw_input('\033[1;91m  [\033[1;97m!!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')
       #menu()
    except KeyboardInterrupt:
       print (" Arret!")
    except IOError:
       print (" Fichier introuvable!")


        bash_decryp_script = raw_input("\033[1;97m╚═\033[1;31m▶\033[1;97m Entrer le nom du script a crypter \033[1;91m▶▶▶ \033[1;97m")
	try:
		ouverture = open(bash_decryp_script,'r')
		lame = ouverture.read()
		ouverture.close()
	emplacement = raw_input("\033[1;97m╚═\033[1;31m▶\033[1;97m Nommer le resultat du cryptage \033[1;91m▶▶▶ \033[1;97m")
	#charge()
	try:
		compresse = lame.replace("eval","echo")
		enregistrement = open(emplacement,'w')
		enregistrement.write("#Decompiler par Faxel\n#Twitter : https://twitter.com/Faxel2020\n")
		enregistrement.write(compresse)
		enregistrement.close()
		print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;92m Compilage reussi")
		raw_input('\033[1;91m  [\033[1;97m!!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')
		#menu()
	except:
		print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;94m Compilage echouer")
		raw_input('\033[1;91m  [\033[1;97m!!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')""")
####################################################################################################	
			
		
g =("""
def mars():
	script_mars = raw_input("\033[1;97m╚═\033[1;31m▶\033[1;97m Entrer le nom du script a crypter \033[1;91m▶▶▶ \033[1;97m")
	try:
		ouverture = open(script_mars,'r').read()
	except IOError:
		print ("\033[1;91m [\033[1;93m!\033[1;91m]\033[1;97m Script introuvable")
		#menu()
	print("\033[1;97m║")
	emplacement = raw_input("\033[1;97m╚═\033[1;31m▶\033[1;97m Nommer le resultat du cryptage \033[1;91m▶▶▶ \033[1;97m")
	#charge()
	try:
		compresse = base64.b16encode(mc.dumps(compile(ouverture, '<string>', 'exec')))
		enregistrement = open(emplacement,'w')
		enregistrement.write('#Compiler par Faxel\n#Twitter : https://twitter.com/Faxel2020\nimport marshal , base64\nexec(marshal.loads(base64.b16decode("'+compresse+'")))')exec(marshal.loads(zlib.decompress(base64.b32decode(""))))
	             #\nimport marshal\nexec(marshal.loads("+repr(vidage)+"))")
		enregistrement.close()
		print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;92m Compilage reussi")
		raw_input('\033[1;91m  [\033[1;97m!!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')
		#menu()
	except:
		print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;94m Compilage echouer")
		raw_input('\033[1;91m  [\033[1;97m!!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')
                #menu()   
		
		
def mars():
	script_mars = raw_input("\033[1;97m╚═\033[1;31m▶\033[1;97m Entrer le nom du script a crypter \033[1;91m▶▶▶ \033[1;97m")
	try:
		ouverture = open(script_mars,'r').read()
	except IOError:
		print ("\033[1;91m [\033[1;93m!\033[1;91m]\033[1;97m Script introuvable")
		#menu()
	print("\033[1;97m║")
	emplacement = raw_input("\033[1;97m╚═\033[1;31m▶\033[1;97m Nommer le resultat du cryptage \033[1;91m▶▶▶ \033[1;97m")
	#charge()
	try:
		compresse = base64.b32encode(mc.dumps(compile(ouverture, '<string>', 'exec')))
		enregistrement = open(emplacement,'w')
		enregistrement.write("#Compiler par Faxel\n#Twitter : https://twitter.com/Faxel2020\nimport marshal , base64\nexec(marshal.loads(base64.b32decode('"+compresse+"')))")
	             #\nimport marshal\nexec(marshal.loads("+repr(vidage)+"))")
		enregistrement.close()
		print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;92m Compilage reussi")
		raw_input('\033[1;91m  [\033[1;97m!!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')
		#menu()
	except:
		print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;94m Compilage echouer")
		raw_input('\033[1;91m  [\033[1;97m!!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')
                #menu()
		
def mars():
	script_mars = raw_input("\033[1;97m╚═\033[1;31m▶\033[1;97m Entrer le nom du script a crypter \033[1;91m▶▶▶ \033[1;97m")
	try:
		ouverture = open(script_mars,'r').read()
	except IOError:
		print ("\033[1;91m [\033[1;93m!\033[1;91m]\033[1;97m Script introuvable")
		#menu()
	print("\033[1;97m║")
	emplacement = raw_input("\033[1;97m╚═\033[1;31m▶\033[1;97m Nommer le resultat du cryptage \033[1;91m▶▶▶ \033[1;97m")
	#charge()
	try:
		compresse = base64.b64encode(mc.dumps(compile(ouverture, '<string>', 'exec')))
		enregistrement = open(emplacement,'w')
		enregistrement.write("#Compiler par Faxel\n#Twitter : https://twitter.com/Faxel2020\nimport marshal , base64\nexec(marshal.loads(base64.b64decode('''"+compresse+"''')))")
		enregistrement.close()
		print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;92m Compilage reussi")
		raw_input('\033[1;91m  [\033[1;97m!!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')
		#menu()
	except:
		print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;94m Compilage echouer")
		raw_input('\033[1;91m  [\033[1;97m!!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')
                #menu()
""")
####################################################################################################
if __name__ == "__main__":
	#dec_mars()
	decryptage_bash()
g =(""" script_mars = raw_input("\033[1;97m╚═\033[1;31m▶\033[1;97m Entrer le nom du script a crypter \033[1;91m▶▶▶ \033[1;97m")
	ouverture = open(script_mars, 'r').read() #mc.dumps(compile(open(script_mars, 'rb').read(), '<string>', 'exec'))
	emplacement = raw_input("\033[1;97m╚═\033[1;31m▶\033[1;97m Nommer le resultat du cryptage \033[1;91m▶▶▶ \033[1;97m")
	#compresse = base64.b16encode(zlib.compress(ouverture))
	compresse = base64.b16encode(mc.dumps(compile(ouverture, '<string>', 'exec')))
	       #vidage = marshal.dumps(compilage)
	enregistrement = open(emplacement,"w")
	enregistrement.write('#Compiler par Faxel\n#Twitter : https://twitter.com/Faxel2020\nimport marshal , base64\nexec(marshal.loads(base64.b16decode("'+compresse+'")))')
	#\nimport marshal\nexec(marshal.loads("+repr(vidage)+"))")
	enregistrement.close()
	print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;92m Compilage reussi")
	raw_input('\033[1;91m  [\033[1;97m!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')
	#except:
		#print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;94m Compilage echouer")
		#raw_input('\033[1;91m  [\033[1;97m!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')

script_mars = raw_input("\033[1;97m╚═\033[1;31m▶\033[1;97m Entrer le nom du script a crypter \033[1;91m▶▶▶ \033[1;97m")
	try:
		ouverture = open(script_mars, 'rb').read()
		#mc.dumps(compile(open(script_mars, 'rb').read(), '<string>', 'exec'))
	except IOError:
		print ("\033[1;91m [\033[1;93m!\033[1;91m]\033[1;97m Script introuvable")
		mars_zlib_base()
	print("\033[1;97m║")
	emplacement = raw_input("\033[1;97m╚═\033[1;31m▶\033[1;97m Nommer le resultat du cryptage \033[1;91m▶▶▶ \033[1;97m")
	charge()
	try:
		bac2k20 = base64.b16encode(zlib.compress(ouverture))
		compilage = mc.dumps(compile(bac2k20, '<string>', 'exec'))
	        vid_z = marshal.dumps(compilage)
		enregistrement = open(emplacement,"w")
		enregistrement.write("#Compiler par Faxel\n#Twitter : https://twitter.com/Faxel2020\nimport marshal , base64\nexec(marshal.loads(base64.b16decode('"+repr(vid_z)+"')))")
		enregistrement.close()
		print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;92m Compilage reussi")
		raw_input('\033[1;91m  [\033[1;97m!!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')
		mars_zlib_base()
	except:
		print ("\033[1;91m [\033[1;97m*\033[1;91m]\033[1;94m Compilage echouer")
		raw_input('\033[1;91m  [\033[1;97m!!\033[1;91m]\033[1;97m Appuyer entrer pour retourner au menu\033[1;93m...')
                mars_zlib_base() 
		import marshal,zlib,base64
exec(marshal.loads(zlib.decompress(base64.b32decode(""))))
		
		

# -*- coding: utf-8 -*-

import os
import sys
import fileinput

N = '\033[0m'
D = '\033[90m'
W = '\033[1;37m'
B = '\033[1;34m'
R = '\033[1;31m'
G = '\033[1;32m'
Y = '\033[1;33m'
C = '\033[1;36m'

Demande = G + '[' + W + '?' + G + '] '
Reussie = G + '[' + W + '√' + G + '] '
Erreur = R + '[' + W + '!' + R + ']'""")

r = ("""
def decryptage():
   try:
       sc = raw_input(Demande + W + "Script " + G + "> " + W)
       f = open(sc,'r')
       Fichierdonnee = f.read()
       f.close()
       nouvelledonnee = Fichierdonnee.replace("eval","echo")
       out = raw_input(Demande + W + "Production" + G + " > " + W)
       f = open(out,'w')
       f.write(nouvelledonnee)
       f.close()
       os.system("touch tes.sh")
       os.system("bash " + out + " > tes.sh")
       os.remove(out)
       os.system("mv -f tes.sh " + out)
       print (Reussie + "Terminer..")

   except KeyboardInterrupt:
       print (Erreur + " Arret!")
   except IOError:
       print (Erreur + " Fichier introuvable!")

def cryptage():
   try:
       script = raw_input(Demande + W + "Script " + G + "> " + W)
       production = raw_input(Demande + W + "production " + G + "> " + W)
       os.system("bash-obfuscate " + script + " -o " + production )
       print (Reussie + "Terminer..")
   except KeyboardInterrupt:
       print (Erreur + " Arret!")
   except IOError:
       print (Erreur + " Fichier introuvable!")


mael = raw_input(W + "Choix" + G + " > ")

if mael == "1" or mael == "01":
   cryptage()
elif mael == "2" or mael == "02":
   decryptage()
else:
   print (Erreur + " Saisie incorrecte")

""")
